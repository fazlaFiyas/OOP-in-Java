Practical 02
PART 01: 

1.	Create a new class called ‘Item’ with two protected instance variables (private variables), an integer variable called ‘location’, and a String variable called ‘description’. 

public class Item 
{
    //data
    private int location;
    private String description;
}

2.	Add a constructor method for the Item class that takes an integer and a String as arguments (in that order). 

public class Item 
{
    //data
    private int location;
    private String description;
    
    //methods
    public Item(int location,String description)
    {
        
    }
}

3.	The constructor should assign the value of these parameters to the corresponding instance variables. 

public class Item 
{
    //data
    private int location;
    private String description;
    
    //methods
    public Item(int location,String description)
    {
        this.location=location;
        this.description=description;
    }
}

4.	Add getter and setter methods for the location and description variables. 

public class Item 
{
    //data
    private int location;
    private String description;
    
    //methods
    public void setLocation(int l)
    {
        location=l;
    }
    public int getlocation()
    {
        return location;
    }
    public void setDescription(String d)
    {
        description=d;
    }
    public String getDescription()
    {
        return description;
    }
}

5.	Add another class called Monster and make the Monster class a sub-class of the Item class. 

public class Monster extends Item 
{
    
}

6.	Add a constructor method to the Monster class that takes an integer and a String argument just like the Item class constructor.

public class Monster extends Item 
{
    //data
    private int i;
    private String s;
    
    //methods
    public Monster(int i,String s)
    {
        this.i=i;
        this.s=s;
    }
}

7.	Use these arguments to call the Item super class constructor from within the Monster class constructor so that the instance variables in the superclass are instantiated correctly.

public class ItemObj 
{
    public static void main(String[] args) 
    {
        Monster m1=new Monster(10,"Colombo");
        Item i1=new Item(20,"Negombo");
        System.out.println("The location is "+i1.getlocation()+" The description is "+i1.getDescription());
        System.out.println("The location is "+m1.getlocation()+" The description is "+m1.getDescription());
    }
}

PART 02

1.	Which of these keywords is used to refer to member of base class from a sub class?
 		b) super

2.	The modifier which specifies that the member can only be accessed in its own class is   
    b) private 


3.	Which of these is a mechanism for naming and visibility control of a class and its content?
  	b) Packages

4.	Which of the following is correct way of importing an entire package ‘pkg’?
    c) import pkg.*

5.	Which of these method of class String is used to extract a single character from a String object?
    c) charAt()	

6.	Which of these method of class String is used to obtain length of String object?
    d) length()


PART 03: Fill in the blanks using appropriate term.

1.	Real-world objects contain 'attributes' and 'behaviours'.
2.	A software object's state is stored in 'attributes'.
3.	A software object's behavior is exposed through methods.
4.	Hiding internal data from the outside world, and accessing it only through publicly exposed methods is known as data 'encapsulation'.
5.	A blueprint for a software object is called a 'class'.
6.	Common behavior can be defined in a 'super class (a parent class)' and inherited into a 'sub class(a child class)' using the 'extend' keyword.
7.	A collection of methods with no implementation is called an 'interface'.
8.	A namespace that organizes classes and interfaces by functionality is called a 'package'.
9.	The term API stands for 'Application Programming Interface'.

